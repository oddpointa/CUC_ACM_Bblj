#include <iostream>
using namespace std;
int a[100];
int v[100] = {0};
int n;
void dfs(int x)
{
    if (x == n + 1) //边界
    {
        for (int i = 1; i <= n; i++)
        {
            cout << a[i] << " ";
        }
        cout << endl;
        return;
    }
    for (int i = 1; i <= n; i++) //循环用每个元素做开始
    {
        if (!v[i]) //如果这个数没用过
        {
            a[x] = i;   //这个位置可以是这个数
            v[i] = 1;   //将这个数标记已用
            dfs(x + 1); //进行深一层次的递归
            v[i] = 0;   //递归结束后标记要清除
        }
    }
}
/*
回溯算法基本思路(缩进表层次)
    递归函数(递归阶段)：
        判断阶段是否到达边界：
            输出结果/返回结果
        循环：当前层次的每一个元素
            判断这个元素是否已经被标记:
                将这个数纳入结果并打标机
                递归函数(递归更深一阶段)
                递归递归结束后清除标记
*/
int main()
{
    n = 3;
    dfs(1);
}